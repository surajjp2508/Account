$PACKAGE Cu.Account
*-----------------------------------------------------------------------------
* <Rating>-66</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE CU.DRAW.VALIDATE
*===============================================================================
* Company Name    : SRGCU
* Developed By    : Magdalena Pavlova
* Arguments In    : n\a
* Arguments Out   : n\a
* Attached To     : n\a
* Attached As     : n\a
*-----------------------------------------------------------------------------
* Description     : 
*-----------------------------------------------------------------------------
* Modification History:
*------------------------
* Date              Who                Reference                 Description
*-----------------------------------------------------------------------------
* 20-03-2019        Magdalena Pavlova                            Initial Version
*===============================================================================

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.ACCOUNT
	$INSERT I_F.AA.ARRANGEMENT
  *  $INSERT I_F.CU.DRAW

    GOSUB INITIALISE
    GOSUB PROCESS.MESSAGE
    
    RETURN


VALIDATE:
*-------------------------------------------------------------------------------
* TODO - Add the validation code here.
* Set AF, AV and AS to the field, multi value and sub value and invoke STORE.END.ERROR
* Set ETEXT to point to the EB.ERROR.TABLE	
	
    AF = Cu.Account.CuDraw.CuDrawDrawAcct
    AV = 1
    AS = 1
    
    sAccountId = R.NEW( AF )
    CALL F.READ( fnAccount, sAccountId, rAccount, fvAccount, sError )
    
	sAccount.Arr.Id = rAccount<AC.ARRANGEMENT.ID>
	CALL F.READ( fnAaArrangement, sAccount.Arr.Id, rAaArrangement, fvAaArrangement, sError )
	sAaArrStatus = rAaArrangement<AA.ARR.ARR.STATUS>
*Do not Hard Code The ETEXT Value.Create EB.ERROR,so EB.ERROR records are created and added.
    LOCATE sAaArrStatus IN sAaArrStatuses SETTING iIdx ELSE
        ETEXT = 'EB-ACCOUNT.STATUS'			;*EB.ERROR records are created replacing the Error message
        CALL STORE.END.ERROR
        RETURN
    END

    sCategory = rAccount<AC.CATEGORY>
    
    LOCATE sCategory IN sCategories SETTING iIdx ELSE
        ETEXT = 'EB-ACCOUNT.STATUS.DRAW'  	;*EB.ERROR records are created replacing the Error message
        CALL STORE.END.ERROR
        RETURN
    END
    
    AF = Cu.Account.CuDraw.CuDrawAction
    AV = 1
    AS = 1
    IF (R.OLD( AF ) NE '') THEN
        IF (R.NEW( AF ) NE 'IMPORT') THEN
            ETEXT = 'EB-DRAW.IMPORT'		;*EB.ERROR records are created replacing the Error message
            CALL STORE.END.ERROR
        END
    END

    IF (R.NEW( AF ) EQ 'IMPORT') THEN
        IF (R.OLD( AF ) NE 'EXPORT') THEN
            ETEXT = 'EB-DRAW.EXP.IMP'		;*EB.ERROR records are created replacing the Error message
            CALL STORE.END.ERROR
        END
    END

    RETURN


INITIALISE:
*-------------------------------------------------------------------------------
   
    fnAccount = 'F.ACCOUNT'
    fvAccount = ''
	CALL OPF( fnAccount, fvAccount )
	
	fnAaArrangement = 'F.AA.ARRANGEMENT'
    fvAaArrangement = ''
	CALL OPF( fnAaArrangement, fvAaArrangement)
	
	sAccountId      = ''
    rAccount        = ''
	sAccount.Arr.Id = ''
	rAaArrangement  = ''
	sAaArrStatus    = ''
	sCategories     = ''
	sAaArrStatuses  = ''
	
	sParamName = 'DRAW.CAT.CODE'
    sParamValues = ''
    sError.param = ''
    sRestFlagPernament = ''
    CALL CU.LIB.GET.CU.PARAMETER( 'ALL-DRAW.PARAMETERS', sParamName, sParamValues, sError.param )
    IF sError.param THEN
        bFatalError = 1
        sErrorLog<-1> = 'DRAW.PARAMETERS ' :sError.param
        RETURN
    END
	sCategories = RAISE(sParamValues)
	
	sParamName = 'AA.STATUS'
    sParamValues = ''
    sError.param = ''
    sRestFlagPernament = ''
    CALL CU.LIB.GET.CU.PARAMETER( 'ALL-DRAW.PARAMETERS', sParamName, sParamValues, sError.param )
    IF sError.param THEN
        bFatalError = 1
        sErrorLog<-1> = 'DRAW.PARAMETERS ' :sError.param
        RETURN
    END
	
	sAaArrStatuses = RAISE(sParamValues)
	    
    RETURN


PROCESS.MESSAGE:
*-------------------------------------------------------------------------------
    BEGIN CASE
    CASE MESSAGE EQ ''        ;* Only during commit...
        BEGIN CASE
        CASE V$FUNCTION EQ 'D'
            GOSUB VALIDATE.DELETE
        CASE V$FUNCTION EQ 'R'
            GOSUB VALIDATE.REVERSE
        CASE OTHERWISE        ;* The real VALIDATE...
            GOSUB VALIDATE
        END CASE
    CASE MESSAGE EQ 'AUT' OR MESSAGE EQ 'VER'     ;* During authorisation and verification...
        GOSUB VALIDATE.AUTHORISATION
    END CASE

    RETURN


VALIDATE.DELETE:
*-------------------------------------------------------------------------------
    RETURN

VALIDATE.REVERSE:
*-------------------------------------------------------------------------------
    RETURN

VALIDATE.AUTHORISATION:
*-------------------------------------------------------------------------------
    RETURN
