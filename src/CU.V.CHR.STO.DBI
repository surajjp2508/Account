$PACKAGE Cu.Account
*-----------------------------------------------------------------------------
* <Rating>-30</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE CU.V.CHR.STO.DBI
*===============================================================================
* Company Name    : CUP
* Developed By    : Magdalena Pavlova
* Arguments In    : n\a
* Arguments Out   : n\a
* Attached To     : n\a
* Attached As     : n\a
*-----------------------------------------------------------------------------
* Description     : Initial check and defaults for STO,DBI.STO
*-----------------------------------------------------------------------------
* Modification History:
*------------------------
* Date              Who                Reference                 Description
*-----------------------------------------------------------------------------
* 17-07-2020        Magdalena Pavlova                            Initial Version
*===============================================================================
    $INSERT I_COMMON
	$INSERT I_EQUATE
    $INSERT I_F.ACCOUNT
    $INSERT I_F.CUSTOMER
    $INSERT I_F.STANDING.ORDER
	$USING Cu.Parameter
   
    
    GOSUB Initialise
    GOSUB Process

    RETURN


Initialise:
*-------------------------------------------------------------------------------
    
	fnAccount = 'F.ACCOUNT'
    fvAccount = ''
    CALL OPF( fnAccount, fvAccount )
	
	sAccountId = ''
	
    fnCustomer = 'F.CUSTOMER'
    fvCustomer = ''
	CALL OPF( fnCustomer, fvCustomer )
    
	sCustomerId = ''
	
	fnStandingOrder = 'F.STANDING.ORDER'
    fvStandingOrder = ''
    CALL OPF( fnStandingOrder, fvStandingOrder )
	
	fnDbiSto= 'F.CU.DBI.STO' 
	fvDbiSto = ''
	CALL OPF( fnDbiSto, fvDbiSto)
	
	sPodAllowed = ''
	sIntAccount = ''
	sPayMethod  = ''
	
	sParamNameId = 'DBI.PARAMETERS'
	sParamName <1>  = 'PRODUCT.ALLW'
	sParamName <2>  = 'DBI.ACCOUNT'
	sParamName <3>  = 'STO.PAY.METHOD'
	
    sParamValues = ''
    sError.param = ''

    Cu.Parameter.CuLibGetCuParameter( sParamNameId, sParamName, sParamValues, sError.param )
	
	sPodAllowed  = sParamValues<1>
	sIntAccount = sParamValues<2,1>
	sPayMethod  = sParamValues<3>
	
	fnApplication 	= 'CUSTOMER'
	sLocalFields 	= 'AGE'
	rPositionFields = ''
	CALL MULTI.GET.LOC.REF(fnApplication, sLocalFields, rPositionFields)
	
	rCustomer.LAge.Pos = rPositionFields<1, 1>

    RETURN


Process:
*-------------------------------------------------------------------------------
    
	sAccountId = ID.NEW['.', 1, 1]
    rAccount = ''
	sError   = ''
    CALL F.READ( fnAccount, sAccountId, rAccount, fvAccount, sError )

    IF rAccount<AC.CLOSURE.DATE> NE '' THEN
        E = 'ST-DRAW.CLOSED.ACCT'
		CALL ERR
        RETURN
    END

    IF NOT(rAccount<AC.CATEGORY> MATCHES sPodAllowed) THEN
        E = 'ST-DBI.SHARE.ACCT'
		CALL ERR
        RETURN
    END

    sCustomerId = rAccount<AC.CUSTOMER>
	rCustomer = ''
	sError    = ''
    CALL F.READ( fnCustomer, sCustomerId, rCustomer, fvCustomer, sError )
	
    IF rCustomer<EB.CUS.LOCAL.REF, rCustomer.LAge.Pos> GT 70 THEN
        E = 'ST-DBI.MEMBER.AGE'
		CALL ERR
        RETURN
    END
	
	sDbiStoId = sCustomerId
	rDbiSto   = ''
	eRRDbiSto = ''
	
	CALL F.READ (fnDbiSto, sDbiStoId, rDbiSto, fvDbiSto, eRRDbiSto)
	IF rDbiSto THEN
		sStoNum = DCOUNT (rDbiSto, @FM)
		FOR I = 1 TO sStoNum
			sStandingOrderId = rDbiSto<I>
			rStandingOrder   = ''
			eRRStandingOrder = ''
			CALL F.READ (fnStandingOrder, sStandingOrderId, rStandingOrder, fvStandingOrder, eRRStandingOrder)
			IF rStandingOrder THEN
*Exceed Max Levels of Nesting Deeper than Three
			GOSUB Process2:  				,*Added GOSUB to reduce nested if
			END
		NEXT I
	END

	R.NEW( STO.CPTY.ACCT.NO )       = sIntAccount
	R.NEW( STO.ORDERING.CUST )      = sCustomerId

    RETURN
END

*-------------------------------------------------------------------------------
Process2:																			,*Added GOSUB to reduce nested if
*-------------------------------------------------------------------------------
				IF rStandingOrder<STO.CURRENT.FREQUENCY>[1, 6] GE TODAY[1, 6] THEN
					E = 'ST-DBI.SECOND.DRAW'
					CALL ERR
					RETURN
				END
RETURN