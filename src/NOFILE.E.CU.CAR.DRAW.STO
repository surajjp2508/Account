$PACKAGE Cu.Account
*-----------------------------------------------------------------------------
* <Rating>-20</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE NOFILE.E.CU.CAR.DRAW.STO(sOutput)
*===============================================================================
* Company Name    : SRGCU
* Developed By    : Magdalena Pavlova
* Arguments In    : n\a
* Arguments Out   : Output data for enquiry CU.CAR.DRAW.LIST
* Attached To     : NOFILE.LIST.CAR.DRAW.STO
* Attached As     : Basic routine
*-----------------------------------------------------------------------------
* Description     : Initial check and defaults for STO,CU.DRAW
*-----------------------------------------------------------------------------
* Modification History:
*------------------------
* Date              Who                Reference                 Description
*-----------------------------------------------------------------------------
* 01-04-2019        Magdalena Pavlova                            Initial Version
*===============================================================================
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_ENQUIRY.COMMON
    *$INSERT I_CU.COMMON
    $INSERT I_F.CUSTOMER
    $INSERT I_F.CUSTOMER.ACCOUNT
    $INSERT I_F.STANDING.ORDER
    $INSERT I_F.COMPANY
    $INSERT I_F.ACCOUNT
	$USING Cu.Parameter

    GOSUB Initialise
    GOSUB CheckSelection
    GOSUB OpenFiles
    GOSUB Main

    RETURN

*----------
Initialise:
*----------

    ENQ.ERROR    = '' ; sDelim       = '|'
    sCustomerPos = '' ; sCategoryPos = ''
    sCustomerNo  = '' ; sCategory    = ''
    sOutput      = '' ; sName        = ''
    sCompMne = ID.COMPANY[7,3]
    
	fnCustomer = 'F.CUSTOMER' 
	fvCustomer = ''
    
	fnCustomerAccount = 'F.CUSTOMER.ACCOUNT'  
	fvCustomerAccount = ''
	
    fnAccount = 'F.ACCOUNT' 
	fvAccount = ''
    
    sAccCategory = ''
    fnStoAccList = 'F.STO.ACCOUNT.LIST' 
	fvStoAccList = ''
    
	fnStandingOrder = 'F.STANDING.ORDER' 
	fvStandingOrder = ''
	
	fnApplication 	= 'CUSTOMER'
	sLocalFields 	= 'L.GARDA.REG'
	rPositionFields = ''
	CALL MULTI.GET.LOC.REF(fnApplication, sLocalFields, rPositionFields)
	
	rCustomer.LGardaReg.Pos = rPositionFields<1, 1>

    RETURN

*--------------
CheckSelection:
*--------------

    LOCATE 'CUSTOMER.ID' IN ENQ.SELECTION<2,1> SETTING sCustomerPos THEN
        sCustomerNo = ENQ.SELECTION<4,sCustomerPos>
    END


    RETURN

*---------
OpenFiles:
*---------

    CALL OPF(fnCustomer, fvCustomer)
    CALL OPF(fnAccount, fvAccount)
    CALL OPF(fnCustomerAccount, fvCustomerAccount)
    CALL OPF(fnStoAccList, fvStoAccList)
    CALL OPF(fnStandingOrder, fvStandingOrder)

    RETURN

*----
Main:
*----

    IF sCustomerNo = "" THEN
        ENQ.ERROR = "Error - Please enter Customer No"
        RETURN
    END

    rCustomerAccount = '' ; CusAccErr = ''

    CALL F.READ(fnCustomerAccount, sCustomerNo, rCustomerAccount, fvCustomerAccount, CusAccErr)
    IF rCustomerAccount THEN
        iCountAccs = DCOUNT(rCustomerAccount, @FM)
*-Avoid using FOR...NEXT loops. use the more efficient LOOP...REMOVE syntax.       
		LOOP
		i = 1
		WHILE i LE iCountAccs
		*FOR i = 1 TO iCountAccs
            sAccountNo = rCustomerAccount<i>
            GOSUB GetStoList
        *NEXT i
		i = i+1
		REPEAT
    END

    RETURN

*----------
GetStoList:
*----------

    rStoAccList = '' ; StoErr = '' ; j = ''
    CALL F.READ(fnStoAccList, sAccountNo, rStoAccList, fvStoAccList, StoErr)
    IF rStoAccList THEN
        iCountStos = DCOUNT(rStoAccList, @FM)
*Avoid using FOR...NEXT loops. use the more efficient LOOP...REMOVE syntax
		LOOP
		j = 1
		WHILE j LE iCountStos
		*FOR j = 1 TO iCountStos
            sStoNo = rStoAccList<j>
            sStoNo = sAccountNo:'.':sStoNo
            rStandingOrder = '' ; Err = ''
            CALL F.READ(fnStandingOrder, sStoNo, rStandingOrder, fvStandingOrder, Err)
            IF rStandingOrder THEN
*In Line No. 134--Exceed Max Levels of Nesting Deeper than Three
			GOSUB Process2     
            END
        *NEXT j
		j = j+1
		REPEAT
    END

    RETURN
	
*-----------
Process2:						,*added GOSUB Process2 to reduce nesting 
*-----------
				IF rStandingOrder<STO.TYPE> = 'FI' AND rStandingOrder<STO.PAY.METHOD> = 'ACCU' THEN
                    GOSUB BuildOutput
                END	
RETURN

*-----------
BuildOutput:
*-----------

    rCustomer = '' ; rAccount = ''
    sName     = '' ; sCCY     = '' 
	sAmount   = '' ; sDateFqu = ''
    sBene     = '' ; sPayDets = '' 
	sStatus = ''
    CALL F.READ(fnCustomer, sCustomerNo, rCustomer, fvCustomer, CusErr)
    IF rCustomer THEN
        IF NOT(sOldMemberNo) THEN
            sOldMemberNo = rCustomer<EB.CUS.LOCAL.REF, rCustomer.LGardaReg.Pos>
        END
        sName = rCustomer<EB.CUS.SHORT.NAME>
    END

    sCCY     = rStandingOrder<STO.CURRENCY>
    sAmount  = rStandingOrder<STO.CURRENT.AMOUNT.BAL>
    sDateFqu = rStandingOrder<STO.CURRENT.FREQUENCY>
    sBene    = rStandingOrder<STO.CPTY.ACCT.NO>
    sPayDets = rStandingOrder<STO.BEN.REFERENCE>
    IF rStandingOrder<STO.CURRENT.END.DATE> NE '' AND rStandingOrder<STO.CURRENT.END.DATE> LT TODAY THEN
		sStatus = 'Cancelled'
	END ELSE 
		sStatus = 'Active'
	END 

    sOutput<-1> = sCustomerNo:sDelim:sOldMemberNo:sDelim:sName:sDelim:sStoNo:sDelim:sCCY:sDelim:sAmount:sDelim:sDateFqu:sDelim:sBene:sDelim:sPayDets:sDelim:sStatus:sDelim

    RETURN

END
